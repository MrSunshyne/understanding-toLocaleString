## Key Concepts

### What is toLocaleString()?

`toLocaleString()` is a JavaScript method that converts numbers to strings using locale-specific formatting rules. It automatically handles:
- Decimal separators (period vs comma)
- Thousand grouping separators
- Currency symbols and placement
- Number notation systems

### Syntax

```javascript
number.toLocaleString(locales, options)
```

**Parameters:**
- `locales` (optional): String or array of locale codes (e.g., 'en-US', 'fr-FR')
- `options` (optional): Object to customize formatting behavior

## Examples for English and French

### Basic Number Formatting

**English (US):**
```javascript
(1234567.89).toLocaleString('en-US')
// Result: "1,234,567.89"
// Uses comma as thousand separator, period as decimal separator
```

**French (France):**
```javascript
(1234567.89).toLocaleString('fr-FR')
// Result: "1 234 567,89"
// Uses space as thousand separator, comma as decimal separator
```

### Currency Formatting with USD

**English + USD:**
```javascript
(1234567.89).toLocaleString('en-US', { 
  style: 'currency', 
  currency: 'USD' 
})
// Result: "$1,234,567.89"
// Dollar sign before the number, comma thousand separator
```

**French + USD:**
```javascript
(1234567.89).toLocaleString('fr-FR', { 
  style: 'currency', 
  currency: 'USD' 
})
// Result: "1 234 567,89 $US"
// Dollar sign after the number with space, space thousand separator
```

### Currency Formatting with EUR

**English + EUR:**
```javascript
(1234567.89).toLocaleString('en-US', { 
  style: 'currency', 
  currency: 'EUR' 
})
// Result: "€1,234,567.89"
// Euro sign before the number, comma thousand separator
```

**French + EUR:**
```javascript
(1234567.89).toLocaleString('fr-FR', { 
  style: 'currency', 
  currency: 'EUR' 
})
// Result: "1 234 567,89 €"
// Euro sign after the number with space, space thousand separator
```

## Common Options

### style
- `'decimal'` (default): Standard number formatting
- `'currency'`: Currency formatting (requires `currency` option)
- `'percent'`: Percentage formatting
- `'unit'`: Unit formatting (e.g., kilometers, megabytes)

### currency
Required when `style: 'currency'`. Examples: `'USD'`, `'EUR'`, `'GBP'`, `'JPY'`

### minimumFractionDigits / maximumFractionDigits
Control decimal places (0-20). Example:
```javascript
(42).toLocaleString('en-US', { 
  minimumFractionDigits: 2,
  maximumFractionDigits: 2 
})
// Result: "42.00"
```

### useGrouping
- `true` (default): Show thousand separators
- `false`: No grouping
```javascript
(1234567).toLocaleString('en-US', { useGrouping: false })
// Result: "1234567"
```

### notation
- `'standard'` (default): Regular notation
- `'scientific'`: Scientific notation (e.g., 1.23E6)
- `'engineering'`: Engineering notation
- `'compact'`: Compact notation (e.g., 1.2M)

## Quick Reference: Key Differences

| Aspect | English (en-US) | French (fr-FR) |
|--------|----------------|----------------|
| Decimal separator | `.` (period) | `,` (comma) |
| Thousand separator | `,` (comma) | ` ` (space) |
| Currency symbol position (EUR) | Before number | After number |
| Example: 1234.56 | 1,234.56 | 1 234,56 |
| Example: €1234.56 | €1,234.56 | 1 234,56 € |
| Example: $1234.56 | $1,234.56 | 1 234,56 $US |

## Browser Locale Auto-Detection

When no locale is specified, `toLocaleString()` automatically uses the browser's locale:

```javascript
(1234.56).toLocaleString()
// Uses browser's default locale (from user's system preferences)
```

This makes it ideal for internationalizing web applications without hardcoding locale preferences.

## Use Cases

- E-commerce: Display prices in user's local format
- Financial dashboards: Show numbers with appropriate separators
- Analytics: Format metrics according to user locale
- International applications: Respect cultural number formatting conventions

